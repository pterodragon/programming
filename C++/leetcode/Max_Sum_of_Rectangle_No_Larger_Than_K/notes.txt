M = [[1,0,1],[0,-2,3]]
k = 2

### attempt
sub[q][w] := partial sum of all submatrix where the top left corner is (0, 0)
to compute any sub matrix from (q, w) to (z, x),
    sub[z][x] - sub[z - q][x] - sub[z][x - w] + sub[z - q][x - w] // check bounds


### complexity
O(n^2) to pre-compute partial sum of all submatrix
sub[0][0] = M[0][0]
sub[q][w] = sub[q - 1][w] + sub[q][w - 1] - sub[q - 1][w - 1] + M[q][w]  // check bounds as well

O(n^2) to compute all pairs of (q, w)

still need O(n^4) = O(n^2) * O(n^2) to try all start and end of matrix pairs

### idea
Consider the 1d case, is there a faster way?
M = [1,-4,4,2,-5,7,-1], k = 8
M = [1,-4,4,2,-5,7,-1], k = -2
CAUTION: k can be negative
PS = [1, -3, 1, 3, -2, 5, -4]

compute sum of all subarray (precompute partial sums) complexity = O(n^2)


sweep M and keep track of
- the current ends M[q] and M[w]
- the current max ans <= k
curr = M[0]

use two pointers method,
move w, if M[w] + curr < 0, move q to w
along, compute the curr accumulated sum
if curr > k, ++q

Overall complexity = O(n)

what if there are two rows
M = [[1,0,1],[0,-2,3]]
k = 2
