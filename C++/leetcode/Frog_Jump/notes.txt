A = [0,1,3,5,6,8,12,17]
2 <= N = len(A) <= 1100

### Observation
jump length <= N - 1, since increasing 1 step by a time at most reaches N - 1 jumps

Also,
maxjumplen[q] = q

mp(x) := max position after x jumps
  = (x + 1)(x)/2
mp = [0, 1, 3, 6, 10, ...]
given a pos n, at least how many jumps are required?
-> find x for (x + 1)(x) / 2 > n
(x + 1)^2 > 2n
x > sqrt(2n) - 1

### attempt

dp[q][a] = can land on q'th stone, last jump is "a" steps

dp[0][0] = 1
dp[q][a] = OR(A[q] - A[q - z] == a ? 
    OR(dp[q - z][a - 1], dp[q - z][a], dp[q - z][a + 1]) :
    0 for z in [1..q - 1])
a < q

### complexity
at most N * N * N
TLE

### idea
check each A[q] for the distance and update dp
